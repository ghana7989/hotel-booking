basePath: /api/v1
definitions:
  api.AuthParams:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  api.BookRoomParams:
    properties:
      fromDate:
        type: string
      numPersons:
        type: integer
      tillDate:
        type: string
    type: object
  types.CreateUserParams:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
    type: object
  types.UpdateUserParams:
    properties:
      firstName:
        type: string
      lastName:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for a hotel booking application.
  title: Hotel Booking API
  version: "1"
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password
      parameters:
      - description: Authentication Parameters
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/api.AuthParams'
      produces:
      - application/json
      responses: {}
      summary: Authenticate a user
      tags:
      - auth
  /bookings:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all bookings
      produces:
      - application/json
      responses: {}
      summary: List all bookings
      tags:
      - booking
  /bookings/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve details of a booking by its ID
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get a booking
      tags:
      - booking
  /bookings/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel a booking by its ID
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Cancel a booking
      tags:
      - booking
  /hotels:
    get:
      consumes:
      - application/json
      description: Retrieve a list of hotels with optional pagination and filtering
        by rating
      parameters:
      - description: Hotel Rating
        in: query
        name: rating
        type: integer
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page for pagination
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses: {}
      summary: List hotels
      tags:
      - hotel
  /hotels/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve details of a hotel by its ID
      parameters:
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get a hotel
      tags:
      - hotel
  /hotels/{id}/rooms:
    get:
      consumes:
      - application/json
      description: Retrieve a list of rooms associated with a given hotel ID
      parameters:
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get rooms of a hotel
      tags:
      - hotel
  /rooms:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all rooms
      produces:
      - application/json
      responses: {}
      summary: Get available rooms
      tags:
      - room
  /rooms/{id}/book:
    post:
      consumes:
      - application/json
      description: Book a room with the given parameters
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: string
      - description: Booking Information
        in: body
        name: book_room
        required: true
        schema:
          $ref: '#/definitions/api.BookRoomParams'
      produces:
      - application/json
      responses: {}
      summary: Book a room
      tags:
      - room
  /users:
    get:
      consumes:
      - application/json
      description: Get details of all users
      produces:
      - application/json
      responses: {}
      summary: List all users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create a new user with the given data
      parameters:
      - description: User Creation Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserParams'
      produces:
      - application/json
      responses: {}
      summary: Create a user
      tags:
      - user
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete a user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get details of a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get a user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user's details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Update Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserParams'
      produces:
      - application/json
      responses: {}
      summary: Update a user
      tags:
      - user
swagger: "2.0"
